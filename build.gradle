group = 'au.com.williamhill.rekafka'
version = '0.1.0-SNAPSHOT'
  
allprojects {
  apply plugin: 'java'
  apply plugin: 'jacoco'

  repositories {
    jcenter()
  }
  
  dependencies {
    compile 'com.obsidiandynamics.yconf:yconf-core:0.1.0'
    compile 'com.obsidiandynamics.yconf:yconf-snakeyaml:0.1.0'
    compile 'com.obsidiandynamics.yconf:yconf-juel:0.1.0'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'com.beust:jcommander:1.71'
    compile 'org.apache.kafka:kafka-clients:0.8.2.2'
    compile 'org.apache.kafka:kafka_2.11:0.8.2.2'
    
    runtime 'org.slf4j:slf4j-log4j12:1.7.25'
    runtime 'log4j:log4j:1.2.17'
  
    testCompile 'junit:junit:4.12'
  }

  jacoco {
    toolVersion = '0.7.9'
  }

  jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)
    reports {
      html.enabled = true
      xml.enabled = true
      csv.enabled = false
    }
  }
}

subprojects {}

task jacocoRootReport(type: JacocoReport) {
  dependsOn = allprojects.test
  additionalSourceDirs = files(allprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(allprojects.sourceSets.main.allSource.srcDirs)
  classDirectories = files(allprojects.sourceSets.main.output)
  executionData = files(allprojects.jacocoTestReport.executionData)
  reports {
    html.enabled = true
    xml.enabled = false
    csv.enabled = false
  }
  onlyIf = {
    true
  }
  doFirst {
    executionData = files(executionData.findAll {
      it.exists()
    })
  }
}

def packageName = 'rekafka'

dependencies {
}

jar {
  baseName packageName
  finalizedBy jacocoRootReport
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  baseName packageName
  classifier = 'javadoc'
  from "$buildDir/docs/javadoc"
}
 
task sourcesJar(type: Jar) {
  baseName packageName
  from sourceSets.main.allSource
  classifier = 'sources'
}
